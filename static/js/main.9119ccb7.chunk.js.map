{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","app/hooks.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","visibleTodos","onModalButtonClick","isModalButtonClicked","useState","selectedTodoId","setSelectedTodoId","checkIfModalButonClicked","todoId","className","map","classNames","id","completed","title","onClick","TodoFilter","onSelectClick","onInputChange","onChange","event","target","value","Active","Completed","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoModal","user","setUser","dispatch","useEffect","fetchUserFromAPI","a","userId","Error","currentTodoActions","href","email","name","App","isLoading","setIsLoading","hasError","setHasError","fetchTodosFromAPI","todoArray","todoActions","selectedValue","normalizedQuery","toLowerCase","trim","includes","getVisibleTodos","filterActions","input","length","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9119ccb7.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return { ...action.payload };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: Status;\n};\n\ntype QueryAction = {\n  type: 'filter/SET_QUERY',\n  payload: string;\n};\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): QueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\ntype Action = SetStatusAction | QueryAction;\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState = { query: '', status: Status.All };\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setStatus, setQuery };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype Action = SetAction;\n\nconst todosReducer = (todos = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { set };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  visibleTodos: Todo[];\n  onModalButtonClick: (todo: Todo) => void;\n  isModalButtonClicked: boolean,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  onModalButtonClick,\n  isModalButtonClicked,\n}) => {\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n\n  const onClick = (todo: Todo) => {\n    setSelectedTodoId(todo.id);\n    onModalButtonClick(todo);\n  };\n\n  const checkIfModalButonClicked = (todoId: number) => {\n    return isModalButtonClicked && todoId === selectedTodoId;\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': checkIfModalButonClicked(todo.id),\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed ? (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              ) : ''}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onClick(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !checkIfModalButonClicked(todo.id),\n                    'fa-eye-slash': checkIfModalButonClicked(todo.id),\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../../types/Status';\n\ntype Props = {\n  onSelectClick: (value: Status) => void,\n  onInputChange: (input: string) => void,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelectClick,\n  onInputChange,\n  query,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={event => onSelectClick(event.target.value as Status)}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => onInputChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onInputChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Status } from './types/Status';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  selectedValue: string,\n  query: string,\n) => {\n  let visibleTodos = todos;\n\n  switch (selectedValue) {\n    case Status.Active:\n      visibleTodos = todos.filter(todo => !todo.completed);\n      break;\n\n    case Status.Completed:\n      visibleTodos = todos.filter(todo => todo.completed);\n      break;\n\n    case Status.All:\n    default:\n      break;\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase().trim();\n\n    return visibleTodos.filter(todo => todo.title.includes(normalizedQuery));\n  }\n\n  return visibleTodos;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchUserFromAPI = async () => {\n      try {\n        if (currentTodo !== null) {\n          setUser(await getUser(currentTodo.userId));\n        }\n      } catch (error) {\n        throw new Error('Error fetching user');\n      }\n    };\n\n    fetchUserFromAPI();\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentTodo || !user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos, getVisibleTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { Status } from './types/Status';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\nimport { actions as filterActions } from './features/filter';\nimport { actions as currentTodoActions } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const fetchTodosFromAPI = async () => {\n      try {\n        setHasError(false);\n        setIsLoading(true);\n        const todoArray = await getTodos();\n\n        dispatch(todoActions.set(todoArray));\n      } catch (error) {\n        setHasError(true);\n        throw new Error('Error fetching todos');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodosFromAPI();\n  }, []);\n\n  const visibleTodos = getVisibleTodos(todos, status, query);\n\n  const onSelectClick = (value: Status) => {\n    dispatch(filterActions.setStatus(value));\n  };\n\n  const onInputChange = (input: string) => {\n    dispatch(filterActions.setQuery(input));\n  };\n\n  const onModalButtonClick = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectClick={onSelectClick}\n                onInputChange={onInputChange}\n                query={query}\n              />\n            </div>\n\n            {hasError && (\n              <p className=\"notification is-warning\">\n                Error fetching todos\n              </p>\n            )}\n\n            {!visibleTodos.length && query && (\n              <p className=\"notification is-warning\">\n                There are no todos matching current filter criteria\n              </p>\n            )}\n\n            {isLoading && (\n              <Loader />\n            )}\n\n            {visibleTodos.length > 0 && (\n              <div className=\"block\">\n                <TodoList\n                  visibleTodos={visibleTodos}\n                  onModalButtonClick={onModalButtonClick}\n                  isModalButtonClicked={!!currentTodo}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}